# Default values for osie.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

global:
  ingress:
    enabled: false
    hostname: ""
    ingressClassName: ""
    secrets: []
    tls: false
  oauth2:
    issuerUri:
    clientId:
    audience:
    logoutUrl:

api:
  component: "api"
  replicaCount: 1
  image:
    repository: ghcr.io/osie-io/osie-api
    pullPolicy: Always
  ingress:
    paths:
      - /api-v1
      - /admin_api/v1
      - /v3/api-docs
    pathType: Prefix
    servicePort: http
    hostname: ""
  podAnnotations: { }
  podSecurityContext: { }
  # fsGroup: 2000
  securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  service:
    type: ClusterIP
    port: 8080
  resources: { }
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }
  ## @param api.extraVolumes Optionally specify extra list of additional volumes for osie-api
  ## Example
  ## - name: osie-extra-volume
  ##   emptyDir: {}
  extraVolumes: []
  ## @param api.extraVolumeMounts Optionally specify extra list of additional volumeMounts for osie-api
  ## Example
  ## - name: osie-extra-volume
  ##   mountPath: /opt/osie/extra-volume
  extraVolumeMounts: []

adminApi:
  oauth2:
    clientId: "osie-admin-api"
    issuerUri:

ui:
  component: "ui"
  replicaCount: 1
  image:
    repository: ghcr.io/osie-io/osie-ui
    pullPolicy: Always
  ingress:
    path: /
    pathType: Prefix
    servicePort: http
    hostname: ""
  oauth2:
    clientId: "osie-ui"
    issuerUri:
    accountConsoleUrl:
    audience:
    logoutUrl:
    scope: "openid profile email offline_access"
    pkce:
      enabled: true
  # Keycloak Realm name if enabled
  realm:
    name: "clients"
    displayName: "Cloud console"
  podAnnotations: { }
  podSecurityContext: { }
  # fsGroup: 2000
  securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  service:
    type: ClusterIP
    port: 80
  resources: { }
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }

admin:
  component: "admin"
  replicaCount: 1
  image:
    repository: ghcr.io/osie-io/osie-admin
    pullPolicy: Always
  ingress:
    path: /osie_admin
    pathType: Prefix
    servicePort: http
    hostname: ""
  oauth2:
    clientId: "osie-admin"
    issuerUri:
    accountConsoleUrl:
    audience:
    logoutUrl:
    scope: "openid profile email offline_access"
    pkce:
      enabled: true
  # Keycloak Realm name if enabled
  realm:
    name: "master"
    displayName: "Cloud Admin"
  podAnnotations: { }
  podSecurityContext: { }
  # fsGroup: 2000
  securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  service:
    type: ClusterIP
    port: 80
  resources: { }
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }


license:
  key: ""

encryption:
  # available options: bcrypt
  provider: "bcrypt"
  bcrypt:
    password: ""
    existingPasswordSecret: ""
    existingPasswordSecretKey: ""

smtp:
  enabled: true
  host: # smtp.example.com
  password: # password
  user: # smtp-username@example.com
  starttls: false
  auth: false
  port: 25
  from: # support@example.com
  fromDisplayName: # Example.com

keycloak:
  enabled: true
  # replicaCount: 3
  component: "keycloak"
  ingress:
    hostname: "auth.{{ .Values.global.ingress.hostname }}"
  service:
    type: ClusterIP
  auth:
    adminUser: osie_admin
  postgresql:
    enabled: true
    # architecture: replication
    auth:
      username: osie_keycloak
      database: osie_keycloak
      # replicationUsername: osie_pg_repl

  keycloakConfigCli:
    enabled: true
    existingConfigmap: '{{ include "osie.keycloakRealmConfigMap" . }}'

  initContainers: |-
    - name: osie-keywind-theme 
      image: ghcr.io/osie-io/osie-keywind:0.1.0-rc1
      imagePullPolicy: Always
      command:
        - sh
      args:
        - -c
        - |
          echo "Copying theme..."
          cp -R /theme/* /keycloak-theme
      volumeMounts:
        - name: keycloak-theme 
          mountPath: /keycloak-theme

  extraVolumeMounts: |-
    - name: keycloak-theme 
      mountPath: /opt/bitnami/keycloak/themes/osie

  extraVolumes: |-
    - name: keycloak-theme 
      emptyDir: {}

  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--features=preview"

externalOpenid:
  issuer: ""
  adminIssuer: ""

redis:
  enabled: true
  architecture: "standalone"
  master:
    disableCommands: []
  replica:
    disableCommands: []

externalRedis:
  host: ""
  port: 6379
  password: ""
  existingSecret: ""
  existingSecretPasswordKey: ""

mongodb:
  enabled: true
  # architecture: replicaset
  # replicaCount: 3
  auth:
    usernames:
      - osie
    databases:
      - osie
  readinessProbe:
    periodSeconds: 30
    timeoutSeconds: 15
  livenessProbe:
    periodSeconds: 45
    timeoutSeconds: 15

externalMongodb:
  hosts: ""
  database: ""
  username: ""
  existingSecret: ""
  existingSecretPasswordKey: ""

rabbitmq:
  enabled: true

externalRabbitmq:
  host: ""
  port: 5672
  username: ""
  password: ""
  vhost: "/"
  existingSecret: ""
  existingSecretPasswordKey: ""

sentry:
  dsn: ""

